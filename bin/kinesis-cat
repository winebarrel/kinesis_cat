#!/usr/bin/env ruby
$: << File.expand_path("#{File.dirname __FILE__}/../lib")
require 'rubygems'
require 'kinesis_cat'
require 'logger'
require 'optparse'

Version = KinesisCat::VERSION

options = {
  :debug => false,
}

ARGV.options do |opt|
  begin
    access_key = nil
    secret_key = nil
    region = nil
    profile_name = nil
    credentials_path = nil

    opt.on('-p', '--profile PROFILE_NAME')  {|v| profile_name            = v    }
    opt.on(''  , '--credentials-path PATH') {|v| credentials_path        = v    }
    opt.on('-k', '--access-key ACCESS_KEY') {|v| access_key              = v    }
    opt.on('-s', '--secret-key SECRET_KEY') {|v| secret_key              = v    }
    opt.on('-r', '--region REGION')         {|v| region                  = v    }
    opt.on(''  , '--stream-name NAME')      {|v| options[:stream_name]   = v    }
    opt.on(''  , '--partition-key KEY')     {|v| options[:partition_key] = v    }
    opt.on(''  , '--debug')                 {    options[:debug]         = true }
    opt.parse!

    aws_opts = {}

    if access_key and secret_key
      aws_opts.update(
        :access_key_id => access_key,
        :secret_access_key => secret_key
      )
    elsif profile_name or credentials_path
      credentials_opts = {}
      credentials_opts[:profile_name] = profile_name if profile_name
      credentials_opts[:path] = credentials_path if credentials_path
      credentials = Aws::SharedCredentials.new(credentials_opts)
      aws_opts[:credentials] = credentials
    elsif (access_key and !secret_key) or (!access_key and secret_key)
      puts opt.help
      exit 1
    end

    aws_opts[:region] = region if region
    Aws.config.update(aws_opts)

    unless options[:stream_name]
      raise '"--stream-name" is required'
    end
  rescue => e
    $stderr.puts("[ERROR] #{e.message}")
    exit 1
  end
end

if options[:debug]
  Aws.config.update(
    :logger => Logger.new($stderr),
    :http_wire_trace => true,
  )
end

begin
  kinesis = Aws::Kinesis::Client.new
  client = KinesisCat::Client.new(kinesis, options)
  json = JSON.parse($stdin.read)

  if json.kind_of?(Array)
    json.each {|i| client.put(i) }
  else
    client.put(json)
  end
rescue => e
  if options[:debug]
    raise e
  else
    $stderr.puts("[ERROR] #{e.message}")
    exit 1
  end
end
